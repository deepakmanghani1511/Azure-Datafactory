{
	"name": "dftripdataTs",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "tripdatacsv",
						"type": "DatasetReference"
					},
					"name": "TripDataCsv"
				},
				{
					"dataset": {
						"referenceName": "TripDataTableTs",
						"type": "DatasetReference"
					},
					"name": "TripFareTableTs"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "TripAggregatecsv",
						"type": "DatasetReference"
					},
					"name": "TripAggregateSink"
				}
			],
			"transformations": [
				{
					"name": "JoinTrip"
				},
				{
					"name": "aggregatebyPaytype"
				}
			],
			"scriptLines": [
				"source(output(",
				"          medallion as string,",
				"          hack_license as string,",
				"          vendor_id as string,",
				"          rate_code as short,",
				"          store_and_fwd_flag as boolean,",
				"          pickup_datetime as timestamp,",
				"          dropoff_datetime as timestamp,",
				"          passenger_count as short,",
				"          trip_time_in_secs as short,",
				"          trip_distance as double,",
				"          pickup_longitude as double,",
				"          pickup_latitude as double,",
				"          dropoff_longitude as double,",
				"          dropoff_latitude as double",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> TripDataCsv",
				"source(output(",
				"          medallion as string,",
				"          hack_license as string,",
				"          vendor_id as string,",
				"          pickup_datetime as string,",
				"          payment_type as string,",
				"          fare_amount as string,",
				"          surcharge as string,",
				"          mta_tax as string,",
				"          tip_amount as string,",
				"          tolls_amount as string,",
				"          total_amount as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> TripFareTableTs",
				"TripDataCsv, TripFareTableTs join(TripDataCsv@medallion == TripFareTableTs@medallion",
				"     && TripDataCsv@hack_license == TripFareTableTs@hack_license",
				"     && TripDataCsv@vendor_id == TripFareTableTs@vendor_id",
				"     && TripDataCsv@pickup_datetime == toTimestamp(TripFareTableTs@pickup_datetime),",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> JoinTrip",
				"JoinTrip aggregate(groupBy(payment_type),",
				"     {Average fare} = avg(toInteger(total_amount)),",
				"          {Total Trip distance} = sum(toInteger(trip_distance))) ~> aggregatebyPaytype",
				"aggregatebyPaytype sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> TripAggregateSink"
			]
		}
	}
}